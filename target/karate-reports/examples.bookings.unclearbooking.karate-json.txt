{"failedCount":3,"prefixedPath":"classpath:examples\/bookings\/unclearbooking.feature","packageQualifiedName":"examples.bookings.unclearbooking","loopIndex":-1,"relativePath":"examples\/bookings\/unclearbooking.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":64800,"millis":0.0648,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"url apiURL"},"stepLog":"21:25:24.829 karate.env system property was: null \n"},{"result":{"nanos":114500,"millis":0.1145,"status":"passed"},"step":{"comments":["## Current API behaviour is to return status: 400, with message \"Bad request: date and id empty\"","## when no User ID or Booking Date is provided","##","## However, given the method description on the API:","## - \"Get bookings. Yo can apply several filters: by date, by user, by user and date, and all of them.\"","##","## We would expect the Get booking method to be able to return all bookings for all users ('and all of them')","## I would argue that the expected way to achieve this would be to provide no User ID and no Booking Date.","##","## This Scenario is to test the behaviour we would expect, if the API would allow to search for bookings","## by providing no User ID and no Booking Date.","##","## However, as is, this test case will FAIL"],"line":23,"prefix":"Given","index":0,"text":"params { id: null, date: null }"}},{"result":{"nanos":119800,"millis":0.1198,"status":"passed"},"step":{"line":24,"prefix":"Given","index":1,"text":"path 'booking'"}},{"result":{"nanos":5058800,"millis":5.0588,"status":"passed"},"step":{"line":25,"prefix":"When","index":2,"text":"method Get"},"stepLog":"21:25:24.831 request:\n1 > GET http:\/\/127.0.0.1:8900\/booking\n1 > Host: 127.0.0.1:8900\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n1 > Accept-Encoding: gzip,deflate\n\n\n21:25:24.834 response time in milliseconds: 3\n1 < 400\n1 < Content-Type: text\/plain;charset=UTF-8\n1 < Content-Length: 30\n1 < Date: Tue, 21 Sep 2021 19:25:24 GMT\n1 < Connection: close\nBad request: date and id empty\n"},{"result":{"nanos":118400,"errorMessage":"status code was: 400, expected: 200, response time in milliseconds: 3, url: http:\/\/127.0.0.1:8900\/booking, response: \nBad request: date and id empty\nclasspath:examples\/bookings\/unclearbooking.feature:26","millis":0.1184,"status":"failed"},"step":{"line":26,"prefix":"Then","index":3,"text":"status 200"},"stepLog":"21:25:24.835 classpath:examples\/bookings\/unclearbooking.feature:26\nThen status 200\nstatus code was: 400, expected: 200, response time in milliseconds: 3, url: http:\/\/127.0.0.1:8900\/booking, response: \nBad request: date and id empty\nclasspath:examples\/bookings\/unclearbooking.feature:26\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":27,"prefix":"And","index":4,"text":"match response == \"#array\""}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":28,"prefix":"And","index":5,"text":"match each response[*] == { date: \"#string\", destination: \"#string\", idBooking: \"#string\", idUser: \"#string\", origin: \"#string\" }"}}],"line":9,"description":"","durationMillis":5.4763,"failed":true,"error":"status code was: 400, expected: 200, response time in milliseconds: 3, url: http:\/\/127.0.0.1:8900\/booking, response: \nBad request: date and id empty\nclasspath:examples\/bookings\/unclearbooking.feature:26","tags":["UnclearBooking","UnclearGetBookingNullParameters"],"executorName":"pool-1-thread-2","name":"","startTime":1632252324828,"refId":"[1:9]","endTime":1632252324836,"exampleIndex":-1},{"sectionIndex":1,"stepResults":[{"result":{"nanos":66300,"millis":0.0663,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"url apiURL"},"stepLog":"21:25:24.837 karate.env system property was: null \n"},{"result":{"nanos":260100,"millis":0.2601,"status":"passed"},"step":{"comments":["## While the API tries to make sure that a strict date format is followed,","## it fails to detect incorrect date formats of type 'yyyy-MM-ddXXX'","## (Where yyyy=year, MM=month, dd=day and XXX=Any number of characters)","##","## This creates a problem where bookings with this incorrect date format","## don't show up with the Get \/booking method for a given date if the user","## had a typo at the end of their date, unless you Get the bookings with","## that exact same typo.","##","## Additionally, if bookings are created with an incorrect date format","## then subsequent tests that gets all bookings for a particular userID","## that has bookings with incorrect date format, then the @GetBooking","## test will fail since it uses a more robust function for detecting","## incorrect date formats.","##","## This Scenario is to test the behaviour we would expect, if the API","## was able to also detect incorrect date formats of this type.","##","## However, as is, this test case will FAIL!"],"line":53,"prefix":"Given","index":0,"text":"params { id: \"#(existingUser.id)\", date: \"2021-09-19xyz\" }"}},{"result":{"nanos":49000,"millis":0.049,"status":"passed"},"step":{"line":54,"prefix":"Given","index":1,"text":"path 'booking'"}},{"result":{"nanos":8677500,"millis":8.6775,"status":"passed"},"step":{"line":55,"prefix":"When","index":2,"text":"method Get"},"stepLog":"21:25:24.840 request:\n1 > GET http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1\n1 > Host: 127.0.0.1:8900\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n1 > Accept-Encoding: gzip,deflate\n\n\n21:25:24.847 response time in milliseconds: 7\n1 < 200\n1 < Content-Type: application\/json;charset=UTF-8\n1 < Transfer-Encoding: chunked\n1 < Date: Tue, 21 Sep 2021 19:25:24 GMT\n[]\n"},{"result":{"nanos":24200,"errorMessage":"status code was: 200, expected: 500, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1, response: \n[]\nclasspath:examples\/bookings\/unclearbooking.feature:56","millis":0.0242,"status":"failed"},"step":{"line":56,"prefix":"Then","index":3,"text":"status 500"},"stepLog":"21:25:24.847 classpath:examples\/bookings\/unclearbooking.feature:56\nThen status 500\nstatus code was: 200, expected: 500, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1, response: \n[]\nclasspath:examples\/bookings\/unclearbooking.feature:56\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":57,"prefix":"And","index":4,"text":"match response == {timestamp:\"#string\", status:500, error:\"Internal Server Error\", message:\"Format date not valid\", path: \"\/booking\"}"}}],"line":33,"description":"","durationMillis":9.0771,"failed":true,"error":"status code was: 200, expected: 500, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1, response: \n[]\nclasspath:examples\/bookings\/unclearbooking.feature:56","tags":["UnclearBooking","UnclearGetBookingIncorrectDate"],"executorName":"pool-1-thread-5","name":"Get booking: Incorrect date format: 2021-09-19xyz","startTime":1632252324835,"refId":"[2:33]","endTime":1632252324847,"exampleIndex":-1},{"sectionIndex":2,"stepResults":[{"result":{"nanos":105100,"millis":0.1051,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"url apiURL"},"stepLog":"21:25:24.838 karate.env system property was: null \n"},{"result":{"nanos":279700,"millis":0.2797,"status":"passed"},"step":{"comments":["## Given the same API problem with incorrect date formats outlined in the above Scenario,","## this Scenario is to test the behaviour we would expect, if the API was able to also","## detect incorrect date formats of this type when creating new bookings.","##","## However, as is, this test case will FAIL!"],"line":68,"prefix":"*","index":0,"text":"def dataGenerator = Java.type('helpers.DataGenerator')"}},{"result":{"nanos":32678500,"millis":32.6785,"status":"passed"},"step":{"endLine":75,"line":69,"prefix":"*","docString":"{\n  email: \"IncorrectDateTestEmail@email.com\",\n  name: \"#(dataGenerator.getRandomName())\"        \n}","index":1,"text":"def user ="}},{"result":{"nanos":1493700,"millis":1.4937,"status":"passed"},"step":{"line":76,"prefix":"Given","index":2,"text":"path 'user'"}},{"result":{"nanos":311200,"millis":0.3112,"status":"passed"},"step":{"line":77,"prefix":"And","index":3,"text":"request user"}},{"result":{"nanos":14594600,"millis":14.5946,"status":"passed"},"step":{"line":78,"prefix":"When","index":4,"text":"method Post"},"stepLog":"21:25:24.874 request:\n1 > POST http:\/\/127.0.0.1:8900\/user\n1 > Content-Type: application\/json; charset=UTF-8\n1 > Content-Length: 74\n1 > Host: 127.0.0.1:8900\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n1 > Accept-Encoding: gzip,deflate\n{\"email\":\"IncorrectDateTestEmail@email.com\",\"name\":\"Alejandrina Leuschke\"}\n\n21:25:24.887 response time in milliseconds: 13\n1 < 201\n1 < Content-Type: application\/json;charset=UTF-8\n1 < Transfer-Encoding: chunked\n1 < Date: Tue, 21 Sep 2021 19:25:24 GMT\n{\"email\":\"IncorrectDateTestEmail@email.com\",\"name\":\"Alejandrina Leuschke\",\"id\":\"IncorrectDateTestEmail@email.com-0.552965395665666\",\"bookings\":[]}\n"},{"result":{"nanos":4200,"millis":0.0042,"status":"passed"},"step":{"line":79,"prefix":"Then","index":5,"text":"status 201"}},{"result":{"nanos":981000,"millis":0.981,"status":"passed"},"step":{"comments":["#Save userId"],"line":82,"prefix":"*","index":6,"text":"user.id = response.id"}},{"result":{"nanos":49600,"millis":0.0496,"status":"passed"},"step":{"line":84,"prefix":"Given","index":7,"text":"path 'booking'"}},{"result":{"nanos":533100,"millis":0.5331,"status":"passed"},"step":{"line":85,"prefix":"And","index":8,"text":"request { date: \"2020-02-03 XXX\", destination: \"ARN\", id: \"#(user.id)\", origin: \"MAD\" }"}},{"result":{"nanos":10816900,"millis":10.8169,"status":"passed"},"step":{"line":86,"prefix":"When","index":9,"text":"method Post"},"stepLog":"21:25:24.893 request:\n2 > POST http:\/\/127.0.0.1:8900\/booking\n2 > Content-Type: application\/json; charset=UTF-8\n2 > Content-Length: 118\n2 > Host: 127.0.0.1:8900\n2 > Connection: Keep-Alive\n2 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n2 > Accept-Encoding: gzip,deflate\n{\"date\":\"2020-02-03 XXX\",\"destination\":\"ARN\",\"id\":\"IncorrectDateTestEmail@email.com-0.552965395665666\",\"origin\":\"MAD\"}\n\n21:25:24.900 response time in milliseconds: 7\n2 < 201\n2 < Content-Type: application\/json;charset=UTF-8\n2 < Transfer-Encoding: chunked\n2 < Date: Tue, 21 Sep 2021 19:25:24 GMT\n{\"idBooking\":\"MAD-ARN-0.275751412266237\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.552965395665666\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\n"},{"result":{"nanos":19800,"errorMessage":"status code was: 201, expected: 400, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking, response: \n{\"idBooking\":\"MAD-ARN-0.275751412266237\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.552965395665666\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\nclasspath:examples\/bookings\/unclearbooking.feature:87","millis":0.0198,"status":"failed"},"step":{"line":87,"prefix":"Then","index":10,"text":"status 400"},"stepLog":"21:25:24.900 classpath:examples\/bookings\/unclearbooking.feature:87\nThen status 400\nstatus code was: 201, expected: 400, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking, response: \n{\"idBooking\":\"MAD-ARN-0.275751412266237\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.552965395665666\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\nclasspath:examples\/bookings\/unclearbooking.feature:87\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":88,"prefix":"And","index":11,"text":"match response contains \"Date format not valid\""}}],"line":62,"description":"","durationMillis":61.8674,"failed":true,"error":"status code was: 201, expected: 400, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking, response: \n{\"idBooking\":\"MAD-ARN-0.275751412266237\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.552965395665666\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\nclasspath:examples\/bookings\/unclearbooking.feature:87","tags":["UnclearPostBookingIncorrectDate","UnclearBooking"],"executorName":"pool-1-thread-3","name":"Post booking: Incorrect date format: 2021-09-19xyz","startTime":1632252324837,"refId":"[3:62]","endTime":1632252324900,"exampleIndex":-1}],"callDepth":0,"name":"Unclear booking scenarios","description":"","resultDate":"2021-09-21 09:25:25 em","durationMillis":76.4208,"passedCount":0}