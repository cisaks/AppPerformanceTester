{"failedCount":3,"prefixedPath":"classpath:examples\/bookings\/unclearbooking.feature","packageQualifiedName":"examples.bookings.unclearbooking","loopIndex":-1,"relativePath":"examples\/bookings\/unclearbooking.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":242700,"millis":0.2427,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"url apiURL"},"stepLog":"00:06:52.174 karate.env system property was: null \n"},{"result":{"nanos":165900,"millis":0.1659,"status":"passed"},"step":{"comments":["## Current API behaviour is to return status: 400, with message \"Bad request: date and id empty\"","## when no User ID or Booking Date is provided","##","## However, given the method description on the API:","## - \"Get bookings. Yo can apply several filters: by date, by user, by user and date, and all of them.\"","##","## We would expect the Get booking method to be able to return all bookings for all users ('and all of them')","## I would argue that the expected way to achieve this would be to provide no User ID and no Booking Date.","##","## This Scenario is to test the behaviour we would expect, if the API would allow to search for bookings","## by providing no User ID and no Booking Date.","##","## However, as is, this test case will FAIL"],"line":23,"prefix":"Given","index":0,"text":"params { id: null, date: null }"}},{"result":{"nanos":487100,"millis":0.4871,"status":"passed"},"step":{"line":24,"prefix":"Given","index":1,"text":"path 'booking'"}},{"result":{"nanos":4786500,"millis":4.7865,"status":"passed"},"step":{"line":25,"prefix":"When","index":2,"text":"method Get"},"stepLog":"00:06:52.177 request:\n1 > GET http:\/\/127.0.0.1:8900\/booking\n1 > Host: 127.0.0.1:8900\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n1 > Accept-Encoding: gzip,deflate\n\n\n00:06:52.181 response time in milliseconds: 3\n1 < 400\n1 < Content-Type: text\/plain;charset=UTF-8\n1 < Content-Length: 30\n1 < Date: Tue, 21 Sep 2021 22:06:52 GMT\n1 < Connection: close\nBad request: date and id empty\n"},{"result":{"nanos":114600,"errorMessage":"status code was: 400, expected: 200, response time in milliseconds: 3, url: http:\/\/127.0.0.1:8900\/booking, response: \nBad request: date and id empty\nclasspath:examples\/bookings\/unclearbooking.feature:26","millis":0.1146,"status":"failed"},"step":{"line":26,"prefix":"Then","index":3,"text":"status 200"},"stepLog":"00:06:52.182 classpath:examples\/bookings\/unclearbooking.feature:26\nThen status 200\nstatus code was: 400, expected: 200, response time in milliseconds: 3, url: http:\/\/127.0.0.1:8900\/booking, response: \nBad request: date and id empty\nclasspath:examples\/bookings\/unclearbooking.feature:26\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":27,"prefix":"And","index":4,"text":"match response == \"#array\""}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":28,"prefix":"And","index":5,"text":"match each response[*] == { date: \"#string\", destination: \"#string\", idBooking: \"#string\", idUser: \"#string\", origin: \"#string\" }"}}],"line":9,"description":"","durationMillis":5.7968,"failed":true,"error":"status code was: 400, expected: 200, response time in milliseconds: 3, url: http:\/\/127.0.0.1:8900\/booking, response: \nBad request: date and id empty\nclasspath:examples\/bookings\/unclearbooking.feature:26","tags":["UnclearBooking","UnclearGetBookingNullParameters"],"executorName":"pool-1-thread-1","name":"Get booking: No parameters","startTime":1632262012173,"refId":"[1:9]","endTime":1632262012182,"exampleIndex":-1},{"sectionIndex":1,"stepResults":[{"result":{"nanos":102400,"millis":0.1024,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"url apiURL"},"stepLog":"00:06:52.174 karate.env system property was: null \n"},{"result":{"nanos":495400,"millis":0.4954,"status":"passed"},"step":{"comments":["## While the API tries to make sure that a strict date format is followed,","## it fails to detect incorrect date formats of type 'yyyy-MM-ddXXX'","## (Where yyyy=year, MM=month, dd=day and XXX=Any number of characters)","##","## This creates a problem where bookings with this incorrect date format","## don't show up with the Get \/booking method for a given date if the user","## had a typo at the end of their date, unless you Get the bookings with","## that exact same typo.","##","## Additionally, if bookings are created with an incorrect date format","## then subsequent tests that gets all bookings for a particular userID","## that has bookings with incorrect date format, then the @GetBooking","## test will fail since it uses a more robust function for detecting","## incorrect date formats.","##","## This Scenario is to test the behaviour we would expect, if the API","## was able to also detect incorrect date formats of this type.","##","## However, as is, this test case will FAIL!"],"line":53,"prefix":"Given","index":0,"text":"params { id: \"#(existingUser.id)\", date: \"2021-09-19xyz\" }"}},{"result":{"nanos":256500,"millis":0.2565,"status":"passed"},"step":{"line":54,"prefix":"Given","index":1,"text":"path 'booking'"}},{"result":{"nanos":6854200,"millis":6.8542,"status":"passed"},"step":{"line":55,"prefix":"When","index":2,"text":"method Get"},"stepLog":"00:06:52.177 request:\n1 > GET http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1\n1 > Host: 127.0.0.1:8900\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n1 > Accept-Encoding: gzip,deflate\n\n\n00:06:52.182 response time in milliseconds: 5\n1 < 200\n1 < Content-Type: application\/json;charset=UTF-8\n1 < Transfer-Encoding: chunked\n1 < Date: Tue, 21 Sep 2021 22:06:52 GMT\n[]\n"},{"result":{"nanos":27400,"errorMessage":"status code was: 200, expected: 500, response time in milliseconds: 5, url: http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1, response: \n[]\nclasspath:examples\/bookings\/unclearbooking.feature:56","millis":0.0274,"status":"failed"},"step":{"line":56,"prefix":"Then","index":3,"text":"status 500"},"stepLog":"00:06:52.183 classpath:examples\/bookings\/unclearbooking.feature:56\nThen status 500\nstatus code was: 200, expected: 500, response time in milliseconds: 5, url: http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1, response: \n[]\nclasspath:examples\/bookings\/unclearbooking.feature:56\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":57,"prefix":"And","index":4,"text":"match response == {timestamp:\"#string\", status:500, error:\"Internal Server Error\", message:\"Format date not valid\", path: \"\/booking\"}"}}],"line":33,"description":"","durationMillis":7.7359,"failed":true,"error":"status code was: 200, expected: 500, response time in milliseconds: 5, url: http:\/\/127.0.0.1:8900\/booking?date=2021-09-19xyz&id=pepe%40pepe.pe1-0.1, response: \n[]\nclasspath:examples\/bookings\/unclearbooking.feature:56","tags":["UnclearBooking","UnclearGetBookingIncorrectDate"],"executorName":"pool-1-thread-3","name":"Get booking: Incorrect date format: 2021-09-19xyz","startTime":1632262012173,"refId":"[2:33]","endTime":1632262012183,"exampleIndex":-1},{"sectionIndex":2,"stepResults":[{"result":{"nanos":53700,"millis":0.0537,"status":"passed"},"step":{"background":true,"line":4,"prefix":"Given","index":0,"text":"url apiURL"},"stepLog":"00:06:52.186 karate.env system property was: null \n"},{"result":{"nanos":319900,"millis":0.3199,"status":"passed"},"step":{"comments":["## Given the same API problem with incorrect date formats outlined in the above Scenario,","## this Scenario is to test the behaviour we would expect, if the API was able to also","## detect incorrect date formats of this type when creating new bookings.","##","## However, as is, this test case will FAIL!"],"line":68,"prefix":"*","index":0,"text":"def dataGenerator = Java.type('helpers.DataGenerator')"}},{"result":{"nanos":21827600,"millis":21.8276,"status":"passed"},"step":{"endLine":75,"line":69,"prefix":"*","docString":"{\n  email: \"IncorrectDateTestEmail@email.com\",\n  name: \"#(dataGenerator.getRandomName())\"        \n}","index":1,"text":"def user ="}},{"result":{"nanos":408500,"millis":0.4085,"status":"passed"},"step":{"line":76,"prefix":"Given","index":2,"text":"path 'user'"}},{"result":{"nanos":278300,"millis":0.2783,"status":"passed"},"step":{"line":77,"prefix":"And","index":3,"text":"request user"}},{"result":{"nanos":10841800,"millis":10.8418,"status":"passed"},"step":{"line":78,"prefix":"When","index":4,"text":"method Post"},"stepLog":"00:06:52.210 request:\n1 > POST http:\/\/127.0.0.1:8900\/user\n1 > Content-Type: application\/json; charset=UTF-8\n1 > Content-Length: 70\n1 > Host: 127.0.0.1:8900\n1 > Connection: Keep-Alive\n1 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n1 > Accept-Encoding: gzip,deflate\n{\"email\":\"IncorrectDateTestEmail@email.com\",\"name\":\"Miss Isidro Funk\"}\n\n00:06:52.219 response time in milliseconds: 9\n1 < 201\n1 < Content-Type: application\/json;charset=UTF-8\n1 < Transfer-Encoding: chunked\n1 < Date: Tue, 21 Sep 2021 22:06:52 GMT\n{\"email\":\"IncorrectDateTestEmail@email.com\",\"name\":\"Miss Isidro Funk\",\"id\":\"IncorrectDateTestEmail@email.com-0.9501626214807845\",\"bookings\":[]}\n"},{"result":{"nanos":5400,"millis":0.0054,"status":"passed"},"step":{"line":79,"prefix":"Then","index":5,"text":"status 201"}},{"result":{"nanos":1564900,"millis":1.5649,"status":"passed"},"step":{"comments":["#Save userId"],"line":82,"prefix":"*","index":6,"text":"user.id = response.id"}},{"result":{"nanos":82900,"millis":0.0829,"status":"passed"},"step":{"line":84,"prefix":"Given","index":7,"text":"path 'booking'"}},{"result":{"nanos":876600,"millis":0.8766,"status":"passed"},"step":{"line":85,"prefix":"And","index":8,"text":"request { date: \"2020-02-03 XXX\", destination: \"ARN\", id: \"#(user.id)\", origin: \"MAD\" }"}},{"result":{"nanos":9062300,"millis":9.0623,"status":"passed"},"step":{"line":86,"prefix":"When","index":9,"text":"method Post"},"stepLog":"00:06:52.224 request:\n2 > POST http:\/\/127.0.0.1:8900\/booking\n2 > Content-Type: application\/json; charset=UTF-8\n2 > Content-Length: 119\n2 > Host: 127.0.0.1:8900\n2 > Connection: Keep-Alive\n2 > User-Agent: Apache-HttpClient\/4.5.13 (Java\/1.8.0_301)\n2 > Accept-Encoding: gzip,deflate\n{\"date\":\"2020-02-03 XXX\",\"destination\":\"ARN\",\"id\":\"IncorrectDateTestEmail@email.com-0.9501626214807845\",\"origin\":\"MAD\"}\n\n00:06:52.231 response time in milliseconds: 7\n2 < 201\n2 < Content-Type: application\/json;charset=UTF-8\n2 < Transfer-Encoding: chunked\n2 < Date: Tue, 21 Sep 2021 22:06:52 GMT\n{\"idBooking\":\"MAD-ARN-0.3294213420245088\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.9501626214807845\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\n"},{"result":{"nanos":28000,"errorMessage":"status code was: 201, expected: 400, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking, response: \n{\"idBooking\":\"MAD-ARN-0.3294213420245088\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.9501626214807845\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\nclasspath:examples\/bookings\/unclearbooking.feature:87","millis":0.028,"status":"failed"},"step":{"line":87,"prefix":"Then","index":10,"text":"status 400"},"stepLog":"00:06:52.232 classpath:examples\/bookings\/unclearbooking.feature:87\nThen status 400\nstatus code was: 201, expected: 400, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking, response: \n{\"idBooking\":\"MAD-ARN-0.3294213420245088\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.9501626214807845\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\nclasspath:examples\/bookings\/unclearbooking.feature:87\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":88,"prefix":"And","index":11,"text":"match response contains \"Date format not valid\""}}],"line":62,"description":"","durationMillis":45.3499,"failed":true,"error":"status code was: 201, expected: 400, response time in milliseconds: 7, url: http:\/\/127.0.0.1:8900\/booking, response: \n{\"idBooking\":\"MAD-ARN-0.3294213420245088\",\"idUser\":\"IncorrectDateTestEmail@email.com-0.9501626214807845\",\"origin\":\"MAD\",\"destination\":\"ARN\",\"date\":\"2020-02-03 XXX\"}\nclasspath:examples\/bookings\/unclearbooking.feature:87","tags":["UnclearPostBookingIncorrectDate","UnclearBooking"],"executorName":"pool-1-thread-1","name":"Post booking: Incorrect date format: 2021-09-19xyz","startTime":1632262012184,"refId":"[3:62]","endTime":1632262012232,"exampleIndex":-1}],"callDepth":0,"name":"Unclear booking scenarios","description":"","resultDate":"2021-09-22 12:06:52 fm","durationMillis":58.8826,"passedCount":0}